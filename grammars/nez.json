{
    "fileTypes": [
        "p4d",
        "peg",
        "nez"
    ],
    "name": "NEZ",
    "patterns": [
        {
            "include": "#commentBlock"
        },
        {
            "include": "#commentLine"
        },
        {
            "include": "#docCommentLine"
        },
        {
            "include": "#charSet"
        },
        {
            "include": "#literalDouble"
        },
        {
            "include": "#literalSingle"
        },
        {
            "include": "#literalBack"
        },
        {
            "include": "#exampleSingleStmt"
        },
        {
            "include": "#exampleDoubleStmt"
        },
        {
            "include": "#exampleBackStmt"
        },
        {
            "include": "#importStmt"
        },
        {
            "captures": {
                "1": {
                    "name": "keyword.operator.nez"
                },
                "2": {
                    "name": "entity.name.type"
                },
                "3": {
                    "name": "invalid"
                }
            },
            "match": "^(public|inline)?[\\t ]*([a-zA-Z$_][a-zA-Z$_0-9]*)[\\t ]*(\".*\")[\\t ]*=?",
            "name": "source.nez.ruleDefinition"
        },
        {
            "captures": {
                "1": {
                    "name": "keyword.operator.nez"
                },
                "2": {
                    "name": "entity.name.type"
                },
                "3": {
                    "name": "invalid"
                }
            },
            "match": "^(public|inline)?[\\t ]*([a-zA-Z$_][a-zA-Z$_0-9]*)[\\t ]*('.*')[\\t ]*=?",
            "name": "source.nez.ruleDefinition"
        },
        {
            "captures": {
                "1": {
                    "name": "keyword.operator.nez"
                },
                "2": {
                    "name": "entity.name.type"
                }
            },
            "match": "^(public|inline)?[\\t ]*([a-zA-Z_][a-zA-Z$_0-9]*)[\\s\\t]*=?",
            "name": "source.nez.ruleDefinition"
        },
        {
            "include": "#invalidCaptureBlockOldest"
        },
        {
            "include": "#nezExtention"
        },
        {
            "include": "#captureBlockOld"
        },
        {
            "include": "#leftJoinCaptureBlock"
        },
        {
            "include": "#leftJoinCaptureBlockOld"
        },
        {
            "include": "#captureBlock"
        },
        {
            "include": "#capturedRule"
        },
        {
            "include": "#capturedRuleOld"
        },
        {
            "include": "#rule"
        },
        {
            "include": "#exprLabel"
        },
        {
            "include": "#pegOperator"
        }
    ],
    "repository": {
        "captureBlock": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.nez"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.nez"
                }
            },
            "patterns": [
                {
                    "include": "#invalidCaptureBlockOld"
                },
                {
                    "include": "source.nez"
                }
            ]
        },
        "captureBlockOld": {
            "begin": "<\\{",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.nez"
                }
            },
            "end": "\\}>",
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.nez"
                }
            },
            "patterns": [
                {
                    "include": "#invalidCaptureBlock"
                },
                {
                    "include": "source.nez"
                }
            ]
        },
        "leftJoinCaptureBlock": {
            "begin": "([a-zA-Z$_][a-zA-Z$_0-9]*)\\s*(\\{@)",
            "beginCaptures": {
                "1": {
                    "name": "variable.parameter.nez"
                },
                "2": {
                    "name": "keyword.operator.nez"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.nez"
                }
            },
            "patterns": [
                {
                    "include": "#invalidCaptureBlockOld"
                },
                {
                    "include": "source.nez"
                }
            ]
        },
        "leftJoinCaptureBlockOld": {
            "begin": "([a-zA-Z$_][a-zA-Z$_0-9]*)\\s*(<\\{\\^)",
            "beginCaptures": {
                "1": {
                    "name": "variable.parameter.nez"
                },
                "2": {
                    "name": "keyword.operator.nez"
                }
            },
            "end": "\\}>",
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.nez"
                }
            },
            "patterns": [
                {
                    "include": "#invalidCaptureBlock"
                },
                {
                    "include": "source.nez"
                }
            ]
        },
        "invalidCaptureBlock": {
            "begin": "\\{",
            "end": "\\}",
            "name": "invalid"
        },
        "invalidCaptureBlockOld": {
            "begin": "<\\{",
            "end": "\\}>",
            "name": "invalid"
        },
        "invalidCaptureBlockOldest": {
            "begin": "<<|8<",
            "end": ">>|>8",
            "name": "invalid"
        },
        "capturedRuleOld": {
            "match": "([a-zA-Z$_][a-zA-Z$_0-9]*)(\\^)([0-9]*)",
            "captures": {
                "1": {
                    "name": "variable.parameter.nez"
                },
                "2": {
                    "name": "keyword.operator.nez"
                },
                "3": {
                    "name": "keyword.operator.nez"
                }
            }
        },
        "capturedRule": {
            "match": "(@)(\\[[0-9]+\\])?([a-zA-Z$_][a-zA-Z$_0-9]*)",
            "captures": {
                "1": {
                    "name": "keyword.operator.nez"
                },
                "2": {
                    "name": "keyword.operator.nez"
                },
                "3": {
                    "name": "variable.parameter.nez"
                }
            }
        },
        "charSet": {
            "begin": "\\[",
            "end": "\\]",
            "name": "keyword.operator"
        },
        "commentBlock": {
            "begin": "/\\*",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.nez"
                }
            },
            "end": "\\*/",
            "name": "comment.block"
        },
        "commentLine": {
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.nez"
                }
            },
            "match": "(//).*$\\n?",
            "name": "comment.line.double-slash.nez"
        },
        "docCommentBlock": {
            "begin": "/\\*\\*(?!/)",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.nez"
                }
            },
            "end": "\\*/",
            "name": "comment.block.documentation.peg"
        },
        "exprLabel": {
            "match": "#[a-zA-Z$_][a-zA-Z$_0-9]*(\\.[a-zA-Z$_][a-zA-Z$_0-9]*)*",
            "name": "entity.name.function"
        },
        "literalDouble": {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.nez"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.nez"
                }
            },
            "name": "string.quoted.double.nez",
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.nez"
                }
            ]
        },
        "literalSingle": {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.nez"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.nez"
                }
            },
            "name": "string.quoted.single.nez",
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.nez"
                }
            ]
        },
        "literalBack": {
            "begin": "`",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.nez"
                }
            },
            "end": "`",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.nez"
                }
            },
            "name": "string.quoted.back.nez",
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.nez"
                }
            ]
        },
        "pegOperator": {
            "match": "[/.+*?&!=@^]",
            "name": "keyword.operator.nez"
        },
        "exampleSingleStmt": {
            "begin": "^(example[!]?)\\s*([a-zA-Z$_][a-zA-Z$_0-9]*)\\s*(''')\\s*$",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.nez"
                },
                "2": {
                    "name": "variable.parameter.nez"
                },
                "3": {
                    "name": "punctuation.definition.string.begin.nez"
                }
            },
            "end": "'''",
            "endCaptures": {
              "0": {
                "name": "punctuation.definition.string.end.nez"
              }
            },
            "name": "string.quoted.back.nez",
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.nez"
                }
            ]
        },
        "exampleDoubleStmt": {
            "begin": "^(example[!]?)\\s*([a-zA-Z$_][a-zA-Z$_0-9]*)\\s*(\"\"\")\\s*$",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.nez"
                },
                "2": {
                    "name": "variable.parameter.nez"
                },
                "3": {
                    "name": "punctuation.definition.string.begin.nez"
                }
            },
            "end": "\"\"\"",
            "endCaptures": {
              "0": {
                "name": "punctuation.definition.string.end.nez"
              }
            },
            "name": "string.quoted.back.nez",
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.nez"
                }
            ]
        },
        "exampleBackStmt": {
            "begin": "^(example[!]?)\\s*([a-zA-Z$_][a-zA-Z$_0-9]*)\\s*(```)\\s*$",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.nez"
                },
                "2": {
                    "name": "variable.parameter.nez"
                },
                "3": {
                    "name": "punctuation.definition.string.begin.nez"
                }
            },
            "end": "```",
            "endCaptures": {
              "0": {
                "name": "punctuation.definition.string.end.nez"
              }
            },
            "name": "string.quoted.back.nez",
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.nez"
                }
            ]
        },
        "nezExtention": {
          "match": "<(if|on|block|def|is|isa|exists|local)",
          "captures": {
              "1": {
                  "name": "keyword.operator.nez"
              }
          },
          "name": "entity.name.type"
        },
        "rule": {
            "match": "[a-zA-Z$_][a-zA-Z$_0-9]*",
            "name": "entity.name.type"
        },
        "importStmt": {
          "match": "(import)\\s+(([*])|[a-zA-Z$_][a-zA-Z$_0-9]*(([.])(([*])|[a-zA-Z$_][a-zA-Z$_0-9]*))?)\\s+(from)",
          "captures": {
              "1": {
                  "name": "keyword.operator.nez"
              },
              "3": {
                  "name": "keyword.operator.nez"
              },
              "5": {
                  "name": "keyword.operator.nez"
              },
              "7": {
                  "name": "keyword.operator.nez"
              },
              "8": {
                  "name": "keyword.operator.nez"
              }
          },
          "name": "entity.name.type"
        }
    },
    "scopeName": "source.nez",
    "uuid": "de7f68da-d5c8-40e7-97a0-0614548f1b8d"
}
